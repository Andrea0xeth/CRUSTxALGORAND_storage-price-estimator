'use strict';

var algosdk = require('algosdk');
var config = require('../config.js');
var getOrCreateKmdWalletAccount = require('../localnet/get-or-create-kmd-wallet-account.js');
var isLocalnet = require('../localnet/is-localnet.js');
var types_account = require('../types/account.js');
var getAccountConfigFromEnvironment = require('./get-account-config-from-environment.js');
var mnemonicAccount = require('./mnemonic-account.js');

/**  @deprecated use mnemonicAccountFromEnvironment instead
 * Returns an Algorand account with private key loaded by convention based on the given name identifier.
 *
 * Note: This function expects to run in a Node.js environment.
 *
 * ## Convention:
 * * **Non-LocalNet:** will load process.env['\{NAME\}_MNEMONIC'] as a mnemonic secret; **Note: Be careful how the mnemonic is handled**,
 *  never commit it into source control and ideally load it via a secret storage service rather than the file system.
 *   If process.env['\{NAME\}_SENDER'] is defined then it will use that for the sender address (i.e. to support rekeyed accounts)
 * * **LocalNet:** will load the account from a KMD wallet called \{NAME\} and if that wallet doesn't exist it will create it and fund the account for you
 *
 * This allows you to write code that will work seamlessly in production and local development (LocalNet) without manual config locally (including when you reset the LocalNet).
 *
 * @example Default
 *
 * If you have a mnemonic secret loaded into `process.env.ACCOUNT_MNEMONIC` then you can call the following to get that private key loaded into an account object:
 * ```typescript
 * const account = await getAccount({config: getAccountConfigFromEnvironment('ACCOUNT')}, algod)
 * ```
 *
 * If that code runs against LocalNet then a wallet called `ACCOUNT` will automatically be created with an account that is automatically funded with 1000 (default) ALGOs from the default LocalNet dispenser.
 *
 * @param account The details of the account to get, either the name identifier (string) or an object with:
 *   * `config`: Account configuration. To get from environment use getAccountConfigFromEnvironment(accountName) OR
 *   * `name`: string: The name identifier of the account (deprecated)
 *   And optionally
 *   * `fundWith`: The amount to fund the account with when it gets created (when targeting LocalNet), if not specified then 1000 Algos will be funded from the dispenser account
 * @param algod An algod client
 * @param kmdClient An optional KMD client to use to create an account (when targeting LocalNet), if not specified then a default KMD client will be loaded from environment variables
 * @returns The requested account with private key loaded from the environment variables or when targeting LocalNet from KMD (idempotently creating and funding the account)
 */
async function getAccount(account, algod, kmdClient) {
    let name;
    let fundWith = undefined;
    let config$1;
    if (typeof account === 'string') {
        name = account;
        config$1 = getAccountConfigFromEnvironment.getAccountConfigFromEnvironment(name);
    }
    else if ('name' in account) {
        name = account.name;
        config$1 = getAccountConfigFromEnvironment.getAccountConfigFromEnvironment(name);
        fundWith = account.fundWith;
    }
    else if ('config' in account) {
        config$1 = account.config;
        name = config$1.accountName;
        fundWith = account.fundWith;
    }
    else {
        throw new Error('Missing name or account config');
    }
    if (config$1.accountMnemonic) {
        const signer = mnemonicAccount.mnemonicAccount(config$1.accountMnemonic);
        const sender = config$1.senderAddress || config$1.senderMnemonic;
        if (sender) {
            config.Config.logger.debug(`Using rekeyed account ${signer.addr} for sender ${sender} for ${name} account`);
            return new types_account.SigningAccount(signer, sender);
        }
        else {
            return signer;
        }
    }
    if (await isLocalnet.isLocalNet(algod)) {
        const account = await getOrCreateKmdWalletAccount.getOrCreateKmdWalletAccount({ name, fundWith }, algod, kmdClient);
        config$1.accountMnemonic = algosdk.secretKeyToMnemonic(account.sk);
        return account;
    }
    throw new Error(`Missing environment variable ${name.toUpperCase()}_MNEMONIC when looking for account ${name}`);
}

exports.getAccount = getAccount;
//# sourceMappingURL=get-account.js.map
