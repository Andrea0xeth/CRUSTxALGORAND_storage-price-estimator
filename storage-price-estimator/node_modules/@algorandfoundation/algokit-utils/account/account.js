'use strict';

var algosdk = require('algosdk');
var config = require('../config.js');
var getOrCreateKmdWalletAccount = require('../localnet/get-or-create-kmd-wallet-account.js');
var isLocalnet = require('../localnet/is-localnet.js');
var transaction = require('../transaction/transaction.js');
var types_account = require('../types/account.js');
var getAccountConfigFromEnvironment = require('./get-account-config-from-environment.js');
var mnemonicAccount = require('./mnemonic-account.js');

/**
 * Returns an account wrapper that supports partial or full multisig signing.
 * @param multisigParams The parameters that define the multisig account
 * @param signingAccounts The signers that are currently present
 * @returns A multisig account wrapper
 */
function multisigAccount(multisigParams, signingAccounts) {
    return new types_account.MultisigAccount(multisigParams, signingAccounts);
}
/**
 * Returns an account wrapper that supports a rekeyed account.
 * @param signer The account, with private key loaded, that is signing
 * @param sender The address of the rekeyed account that will act as a sender
 * @returns The SigningAccount wrapper
 */
function rekeyedAccount(signer, sender) {
    return new types_account.SigningAccount(signer, sender);
}
/**
 * Returns an account wrapper that supports a transaction signer with associated sender address.
 * @param signer The transaction signer
 * @param sender The address of sender account
 * @returns The SigningAccount wrapper
 */
function transactionSignerAccount(signer, sender) {
    return { addr: sender, signer };
}
/** Returns a new, random Algorand account with secret key loaded.
 *
 * This is a wrapper around algosdk.generateAccount to provide a more friendly/obvious name.
 *
 */
function randomAccount() {
    // This method is confusingly named, so this function provides a more dev friendly "wrapper" name
    return algosdk.generateAccount();
}
/**
 * Returns an Algorand account with private key loaded by convention from environment variables based on the given name identifier.
 *
 * Note: This function expects to run in a Node.js environment.
 *
 * ## Convention:
 * * **Non-LocalNet:** will load process.env['\{NAME\}_MNEMONIC'] as a mnemonic secret; **Note: Be careful how the mnemonic is handled**,
 *  never commit it into source control and ideally load it via a secret storage service rather than the file system.
 *   If process.env['\{NAME\}_SENDER'] is defined then it will use that for the sender address (i.e. to support rekeyed accounts)
 * * **LocalNet:** will load the account from a KMD wallet called \{NAME\} and if that wallet doesn't exist it will create it and fund the account for you
 *
 * This allows you to write code that will work seamlessly in production and local development (LocalNet) without manual config locally (including when you reset the LocalNet).
 *
 * @example Default
 *
 * If you have a mnemonic secret loaded into `process.env.MY_ACCOUNT_MNEMONIC` then you can call the following to get that private key loaded into an account object:
 * ```typescript
 * const account = await mnemonicAccountFromEnvironment('MY_ACCOUNT', algod)
 * ```
 *
 * If that code runs against LocalNet then a wallet called `MY_ACCOUNT` will automatically be created with an account that is automatically funded with 1000 (default) ALGOs from the default LocalNet dispenser.
 * If not running against LocalNet then it will use proces.env.MY_ACCOUNT_MNEMONIC as the private key and (if present) process.env.MY_ACCOUNT_SENDER as the sender address.
 *
 * @param account The details of the account to get, either the name identifier (string) or an object with:
 *   * `name`: string: The name identifier of the account
 *   * `fundWith`: The amount to fund the account with when it gets created (when targeting LocalNet), if not specified then 1000 Algos will be funded from the dispenser account
 * @param algod An algod client
 * @param kmdClient An optional KMD client to use to create an account (when targeting LocalNet), if not specified then a default KMD client will be loaded from environment variables
 * @returns The requested account with private key loaded from the environment variables or when targeting LocalNet from KMD (idempotently creating and funding the account)
 */
async function mnemonicAccountFromEnvironment(account, algod, kmdClient) {
    const { name, fundWith } = typeof account === 'string' ? { name: account, fundWith: undefined } : account;
    // todo: When eventually removing this method, inline it here
    const config$1 = getAccountConfigFromEnvironment.getAccountConfigFromEnvironment(name);
    if (config$1.accountMnemonic) {
        const signer = mnemonicAccount.mnemonicAccount(config$1.accountMnemonic);
        const sender = config$1.senderAddress;
        if (sender) {
            config.Config.logger.debug(`Using rekeyed account ${signer.addr} for sender ${sender} for ${name} account`);
            return new types_account.SigningAccount(signer, sender);
        }
        else {
            return signer;
        }
    }
    if (await isLocalnet.isLocalNet(algod)) {
        return await getOrCreateKmdWalletAccount.getOrCreateKmdWalletAccount({ name, fundWith }, algod, kmdClient);
    }
    throw new Error(`Missing environment variable ${name.toUpperCase()}_MNEMONIC when looking for account ${name}`);
}
/** Returns an account's address as a byte array
 *
 * @param account Either an account (with private key loaded) or the string address of an account
 */
function getAccountAddressAsUint8Array(account) {
    return algosdk.decodeAddress(typeof account === 'string' ? account : transaction.getSenderAddress(account)).publicKey;
}
/** Returns the string address of an Algorand account from a base64 encoded version of the underlying byte array of the address public key
 *
 * @param addressEncodedInB64 The base64 encoded version of the underlying byte array of the address public key
 */
function getAccountAddressAsString(addressEncodedInB64) {
    return algosdk.encodeAddress(Buffer.from(addressEncodedInB64, 'base64'));
}

exports.getAccountAddressAsString = getAccountAddressAsString;
exports.getAccountAddressAsUint8Array = getAccountAddressAsUint8Array;
exports.mnemonicAccountFromEnvironment = mnemonicAccountFromEnvironment;
exports.multisigAccount = multisigAccount;
exports.randomAccount = randomAccount;
exports.rekeyedAccount = rekeyedAccount;
exports.transactionSignerAccount = transactionSignerAccount;
//# sourceMappingURL=account.js.map
