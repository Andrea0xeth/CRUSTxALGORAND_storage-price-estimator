import algosdk from 'algosdk';
import { Config } from '../config.mjs';
import { getSenderAddress, encodeTransactionNote, getTransactionParams, encodeLease, sendTransaction } from '../transaction/transaction.mjs';

/**
 * Transfer ALGOs between two accounts.
 * @param transfer The transfer definition
 * @param algod An algod client
 * @returns The transaction object and optionally the confirmation if it was sent to the chain (`skipSending` is `false` or unset)
 *
 * @example Usage example
 * ```typescript
 * await algokit.transferAlgos({ from, to, amount: algokit.algos(1) }, algod)
 * ```
 */
async function transferAlgos(transfer, algod) {
    const { from, to, amount, note, transactionParams, lease, ...sendParams } = transfer;
    const transaction = algosdk.makePaymentTxnWithSuggestedParamsFromObject({
        from: getSenderAddress(from),
        to: getSenderAddress(to),
        amount: amount.microAlgos,
        note: encodeTransactionNote(note),
        suggestedParams: await getTransactionParams(transactionParams, algod),
        closeRemainderTo: undefined,
        rekeyTo: undefined,
    });
    const encodedLease = encodeLease(lease);
    if (encodedLease) {
        transaction.addLease(encodedLease);
    }
    if (!sendParams.skipSending) {
        Config.getLogger(sendParams.suppressLog).debug(`Transferring ${amount.microAlgos}ÂµALGOs from ${getSenderAddress(from)} to ${getSenderAddress(to)}`);
    }
    return sendTransaction({ transaction, from, sendParams }, algod);
}

export { transferAlgos };
//# sourceMappingURL=transfer-algos.mjs.map
