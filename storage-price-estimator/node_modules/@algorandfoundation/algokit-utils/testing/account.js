'use strict';

var algosdk = require('algosdk');
var transferAlgos = require('../transfer/transfer-algos.js');
var config = require('../config.js');
var getDispenserAccount = require('../account/get-dispenser-account.js');

/**
 * Creates an ephemeral Algorand account for the purposes of testing.
 * Returns a newly created random test account that is funded from the dispenser
 * DO NOT USE THIS TO CREATE A MAINNET ACCOUNT!
 * Note: By default this will log the mnemonic of the account.
 * @param param0 The config for the test account to generate
 * @param algod An algod client
 * @param kmd A KMD client, if not specified then a default KMD client will be loaded from environment variables
 * @returns The account, with private key loaded
 */
async function getTestAccount({ suppressLog, initialFunds, accountGetter }, algod, kmd) {
    const account = accountGetter ? await accountGetter(algod, kmd) : algosdk.generateAccount();
    config.Config.getLogger(suppressLog).info(`New test account created with address '${account.addr}' and mnemonic '${algosdk.secretKeyToMnemonic(account.sk)}'.`);
    const dispenser = await getDispenserAccount.getDispenserAccount(algod, kmd);
    await transferAlgos.transferAlgos({ from: dispenser, to: account.addr, amount: initialFunds, note: 'Funding test account', suppressLog }, algod);
    const accountInfo = await algod.accountInformation(account.addr).do();
    config.Config.getLogger(suppressLog).info('Test account funded; account balance: %d ÂµAlgos', accountInfo.amount);
    return account;
}

exports.getTestAccount = getTestAccount;
//# sourceMappingURL=account.js.map
