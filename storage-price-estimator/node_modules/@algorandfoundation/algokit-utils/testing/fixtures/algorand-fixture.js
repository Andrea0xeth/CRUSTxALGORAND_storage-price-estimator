'use strict';

var account = require('../account.js');
var indexer = require('../indexer.js');
var transactionLogger = require('../transaction-logger.js');
var networkClient = require('../../network-client.js');
var amount = require('../../amount.js');
var indexerLookup = require('../../indexer-lookup.js');
var config = require('../../config.js');

/**
 * Creates a test fixture for automated testing against Algorand.
 * By default it tests against an environment variable specified client
 *  if the standard environment variables are specified, otherwise against
 *  a default LocalNet instance, but you can pass in an algod, indexer
 *  and/or kmd if you want to test against an explicitly defined network.
 *
 * @example
 * ```typescript
 * const algorand = algorandFixture(undefined, getConfigFromEnvOrDefaults())
 *
 * beforeEach(algorand.beforeEach, 10_000)
 *
 * test('My test', async () => {
 *     const {algod, indexer, testAccount, ...} = algorand.context
 *     // test things...
 * })
 * ```
 *
 * @param fixtureConfig The fixture configuration
 * @param config The algo configuration
 * @returns The fixture
 */
function algorandFixture(fixtureConfig, config$1) {
    config$1 = config$1 || networkClient.getConfigFromEnvOrDefaults();
    const algod = fixtureConfig?.algod ?? networkClient.getAlgoClient(config$1.algodConfig);
    const indexer$1 = fixtureConfig?.indexer ?? networkClient.getAlgoIndexerClient(config$1.indexerConfig);
    const kmd = fixtureConfig?.kmd ?? networkClient.getAlgoKmdClient(config$1.kmdConfig);
    let context;
    const beforeEach = async () => {
        config.Config.configure({ debug: true });
        const transactionLogger$1 = new transactionLogger.TransactionLogger();
        const transactionLoggerAlgod = transactionLogger$1.capture(algod);
        context = {
            algod: transactionLoggerAlgod,
            indexer: indexer$1,
            kmd: kmd,
            testAccount: await account.getTestAccount({ initialFunds: fixtureConfig?.testAccountFunding ?? amount.algos(10), suppressLog: true, accountGetter: fixtureConfig?.accountGetter }, transactionLoggerAlgod, kmd),
            generateAccount: (params) => account.getTestAccount({ accountGetter: fixtureConfig?.accountGetter, ...params }, transactionLoggerAlgod, kmd),
            transactionLogger: transactionLogger$1,
            waitForIndexer: () => transactionLogger$1.waitForIndexer(indexer$1),
            waitForIndexerTransaction: (transactionId) => indexer.runWhenIndexerCaughtUp(() => indexerLookup.lookupTransactionById(transactionId, indexer$1)),
        };
    };
    return {
        get context() {
            return context;
        },
        beforeEach,
    };
}

exports.algorandFixture = algorandFixture;
//# sourceMappingURL=algorand-fixture.js.map
