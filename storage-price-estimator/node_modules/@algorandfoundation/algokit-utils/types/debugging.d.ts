import algosdk from 'algosdk';
import { CompiledTeal } from './app';
/**
 * AVM debugger source map format.
 */
export interface AVMDebuggerSourceMapDict {
    'txn-group-sources': Array<{
        'sourcemap-location': string;
        hash: string;
    }>;
}
/**
 * AVM debugger source map entry class.
 */
export declare class AVMDebuggerSourceMapEntry {
    location: string;
    programHash: string;
    /**
     * Create an AVM debugger source map entry.
     * @param location The location of the file the source map is for.
     * @param programHash The hash of the TEAL binary.
     */
    constructor(location: string, programHash: string);
    equals(other: AVMDebuggerSourceMapEntry): boolean;
    toString(): string;
}
/**
 * AVM debugger source map class.
 */
export declare class AVMDebuggerSourceMap {
    txnGroupSources: AVMDebuggerSourceMapEntry[];
    /**
     *
     * @param txnGroupSources
     */
    constructor(txnGroupSources: AVMDebuggerSourceMapEntry[]);
    /**
     * Creates a source map from a dictionary of source map data.
     * @param data The data
     * @returns The source map
     */
    static fromDict(data: AVMDebuggerSourceMapDict): AVMDebuggerSourceMap;
    /**
     * Converts the source map to a dictionary that can be passed around and then parsed back using `AVMDebuggerSourceMap.fromDict`.
     * @returns The dictionary
     */
    toDict(): AVMDebuggerSourceMapDict;
}
/**
 * Class representing a debugger source maps input for persistence.
 *
 * Note: rawTeal and compiledTeal are mutually exclusive. Only one of them should be provided.
 */
export declare class PersistSourceMapInput {
    appName: string;
    compiledTeal?: CompiledTeal;
    private _fileName;
    private _rawTeal?;
    private constructor();
    /**
     * Returns debugger source maps input from raw TEAL code.
     * @param rawTeal The raw TEAL code
     * @param appName The name of the app
     * @param fileName The name of the file to persist to
     * @returns The persist source map input
     */
    static fromRawTeal(rawTeal: string, appName: string, fileName: string): PersistSourceMapInput;
    /**
     * Returns debugger source maps input from compiled TEAL code.
     * @param compiledTeal The compiled TEAL code
     * @param appName The name of the app
     * @param fileName The name of the file to persist to
     * @returns The persist source map input
     */
    static fromCompiledTeal(compiledTeal: CompiledTeal, appName: string, fileName: string): PersistSourceMapInput;
    /** Get the underlying raw teal */
    get rawTeal(): string;
    /** Get the file name */
    get fileName(): string;
    /**
     * Strips the '.teal' extension from a filename, if present.
     *
     * @param fileName - The filename to strip the extension from.
     * @returns The filename without the '.teal' extension.
     */
    private stripTealExtension;
}
/** Parameters to a call that persists source maps */
export interface PersistSourceMapsParams {
    /** An array of PersistSourceMapInput objects. Each object can either contain rawTeal, in which case the function will execute a compile to obtain byte code, or it can accept an object of type CompiledTeal provided by algokit, which is used for source codes that have already been compiled and contain the traces. */
    sources: PersistSourceMapInput[];
    /** The root directory of the project. */
    projectRoot: string;
    /** An Algodv2 client to perform the compilation. */
    client: algosdk.Algodv2;
    /** A boolean indicating whether to include the source files in the output. */
    withSources?: boolean;
}
/**
 * Parameters to a call that simulates a transaction and persists the response.
 */
export interface SimulateAndPersistResponseParams {
    /** algod An Algodv2 client to perform the simulation. */
    algod: algosdk.Algodv2;
    /** The AtomicTransactionComposer with transaction(s) loaded. */
    atc: algosdk.AtomicTransactionComposer;
    /** projectRoot The root directory of the project. */
    projectRoot: string;
    /** bufferSizeMb The buffer size in megabytes. */
    bufferSizeMb: number;
}
//# sourceMappingURL=debugging.d.ts.map