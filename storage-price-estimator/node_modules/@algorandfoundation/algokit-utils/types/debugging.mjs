/**
 * AVM debugger source map entry class.
 */
class AVMDebuggerSourceMapEntry {
    /**
     * Create an AVM debugger source map entry.
     * @param location The location of the file the source map is for.
     * @param programHash The hash of the TEAL binary.
     */
    constructor(location, programHash) {
        this.location = location;
        this.programHash = programHash;
    }
    equals(other) {
        return this.location === other.location && this.programHash === other.programHash;
    }
    toString() {
        return JSON.stringify({ 'sourcemap-location': this.location, hash: this.programHash });
    }
}
/**
 * AVM debugger source map class.
 */
class AVMDebuggerSourceMap {
    /**
     *
     * @param txnGroupSources
     */
    constructor(txnGroupSources) {
        this.txnGroupSources = txnGroupSources;
    }
    /**
     * Creates a source map from a dictionary of source map data.
     * @param data The data
     * @returns The source map
     */
    static fromDict(data) {
        return new AVMDebuggerSourceMap(data['txn-group-sources'].map((item) => new AVMDebuggerSourceMapEntry(item['sourcemap-location'], item['hash'])));
    }
    /**
     * Converts the source map to a dictionary that can be passed around and then parsed back using `AVMDebuggerSourceMap.fromDict`.
     * @returns The dictionary
     */
    toDict() {
        return { 'txn-group-sources': this.txnGroupSources.map((item) => JSON.parse(item.toString())) };
    }
}
/**
 * Class representing a debugger source maps input for persistence.
 *
 * Note: rawTeal and compiledTeal are mutually exclusive. Only one of them should be provided.
 */
class PersistSourceMapInput {
    constructor(appName, fileName, rawTeal, compiledTeal) {
        this.compiledTeal = compiledTeal;
        this.appName = appName;
        this._rawTeal = rawTeal;
        this._fileName = this.stripTealExtension(fileName);
    }
    /**
     * Returns debugger source maps input from raw TEAL code.
     * @param rawTeal The raw TEAL code
     * @param appName The name of the app
     * @param fileName The name of the file to persist to
     * @returns The persist source map input
     */
    static fromRawTeal(rawTeal, appName, fileName) {
        return new PersistSourceMapInput(appName, fileName, rawTeal);
    }
    /**
     * Returns debugger source maps input from compiled TEAL code.
     * @param compiledTeal The compiled TEAL code
     * @param appName The name of the app
     * @param fileName The name of the file to persist to
     * @returns The persist source map input
     */
    static fromCompiledTeal(compiledTeal, appName, fileName) {
        return new PersistSourceMapInput(appName, fileName, undefined, compiledTeal);
    }
    /** Get the underlying raw teal */
    get rawTeal() {
        if (this._rawTeal) {
            return this._rawTeal;
        }
        else if (this.compiledTeal) {
            return this.compiledTeal.teal;
        }
        else {
            throw new Error('No teal content found');
        }
    }
    /** Get the file name */
    get fileName() {
        return this._fileName;
    }
    /**
     * Strips the '.teal' extension from a filename, if present.
     *
     * @param fileName - The filename to strip the extension from.
     * @returns The filename without the '.teal' extension.
     */
    stripTealExtension(fileName) {
        if (fileName.endsWith('.teal')) {
            return fileName.slice(0, -5);
        }
        return fileName;
    }
}

export { AVMDebuggerSourceMap, AVMDebuggerSourceMapEntry, PersistSourceMapInput };
//# sourceMappingURL=debugging.mjs.map
