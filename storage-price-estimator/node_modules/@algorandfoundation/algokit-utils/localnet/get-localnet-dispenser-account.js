'use strict';

var getKmdWalletAccount = require('./get-kmd-wallet-account.js');
var isLocalnet = require('./is-localnet.js');

/**
 * Returns an Algorand account with private key loaded for the default LocalNet dispenser account (that can be used to fund other accounts)
 *
 * @param algod An algod client
 * @param kmd A KMD client, if not specified then a default KMD client will be loaded from environment variables
 */
async function getLocalNetDispenserAccount(algod, kmd) {
    if (!(await isLocalnet.isLocalNet(algod))) {
        throw "Can't get default account from non LocalNet network";
    }
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    return (await getKmdWalletAccount.getKmdWalletAccount({ name: 'unencrypted-default-wallet', predicate: (a) => a.status !== 'Offline' && a.amount > 1000000000 }, algod, kmd));
}

exports.getLocalNetDispenserAccount = getLocalNetDispenserAccount;
//# sourceMappingURL=get-localnet-dispenser-account.js.map
